import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
import asyncio
import asyncpg
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
DB_DSN = os.getenv("DATABASE_URL")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


async def notify_users_with_updated_links():
    conn = await asyncpg.connect(DB_DSN)

    # –í—Ä–µ–º–µ–Ω–Ω–∞—è –≥—Ä–∞–Ω–∏—Ü–∞ ‚Äî –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞
    check_time = datetime.utcnow() - timedelta(hours=24)

    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä—ã email –∏ tg_id, –≥–¥–µ –µ—Å—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º
    rows = await conn.fetch("""
        SELECT u.tg_id, ul.email, MAX(ul.timestamp) as last_update
        FROM user_links ul
        JOIN users u ON ul.email = u.email
        WHERE ul.timestamp > $1
        GROUP BY u.tg_id, ul.email
    """, check_time)

    for row in rows:
        tg_id = row["tg_id"]
        email = row["email"]
        last_update = row["last_update"].strftime('%Y-%m-%d %H:%M:%S')

        try:
            await bot.send_message(
                chat_id=tg_id,
                text=f"üîî –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º —Å {last_update}!\n(Email: {email})"
            )
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} ({email})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

    await conn.close()


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("üëã –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º.")


@dp.message(Command("notify"))
async def notify_cmd(message: types.Message):
    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º...")
    await notify_users_with_updated_links()
    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
