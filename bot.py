import logging
from aiogram import Bot, Dispatcher, types
from aiogram.enums.parse_mode import ParseMode
from aiogram.client.default import DefaultBotProperties
from aiogram.filters import Command
import asyncio
import asyncpg
import os
from dotenv import load_dotenv
from datetime import datetime, timedelta

load_dotenv()

API_TOKEN = os.getenv("BOT_TOKEN")
DB_DSN = os.getenv("DATABASE_URL")

logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(levelname)s - %(message)s"
)

bot = Bot(
    token=API_TOKEN,
    default=DefaultBotProperties(parse_mode=ParseMode.HTML)
)
dp = Dispatcher()


async def notify_users_with_updated_links():
    conn = await asyncpg.connect(DB_DSN)

    # –ë–µ—Ä—ë–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    check_time = datetime.now() - timedelta(hours=24)

    # –í—Å–µ email, —É –∫–æ–≥–æ –±—ã–ª–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å—Å—ã–ª–æ–∫
    rows = await conn.fetch("""
        SELECT DISTINCT ul.email, u.tg_id
        FROM user_links ul
        JOIN users u ON ul.email = u.email
        WHERE ul.timestamp > $1
    """, check_time)

    for row in rows:
        tg_id = row["tg_id"]
        email = row["email"]

        try:
            await bot.send_message(
                chat_id=tg_id,
                text="üîî –û–±–Ω–æ–≤–∏–ª–∞—Å—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–∏–º –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–º —Å—Å—ã–ª–∫–∞–º!"
            )
            logging.info(f"–£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id} ({email})")
        except Exception as e:
            logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {tg_id}: {e}")

    await conn.close()


@dp.message(Command("start"))
async def start_cmd(message: types.Message):
    await message.answer("üëã –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω. –Ø –ø—Ä–∏—à–ª—é —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ, –∫–æ–≥–¥–∞ –æ–±–Ω–æ–≤–∏—Ç—Å—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –ø–æ –≤–∞—à–∏–º —Å—Å—ã–ª–∫–∞–º.")


@dp.message(Command("notify"))
async def notify_cmd(message: types.Message):
    await message.answer("üîÑ –ü—Ä–æ–≤–µ—Ä—è—é –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ —Å—Å—ã–ª–∫–∞–º...")
    await notify_users_with_updated_links()
    await message.answer("‚úÖ –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ä–∞–∑–æ—Å–ª–∞–Ω—ã.")


async def main():
    await dp.start_polling(bot)


if __name__ == "__main__":
    asyncio.run(main())
